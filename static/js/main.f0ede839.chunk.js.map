{"version":3,"sources":["../../src/PlotlyPlot.js","../../src/utils.js","../../src/index.js","App.js","index.js"],"names":["Plotly","require","sumOfArray","arr","c","averageOfArray","weibullScale","scale","tickvals","Math","ticktext","e","Plot","createPlotlyComponent","Weibull","data","name","rest","useState","wb","x","y","f","plotData","setPlotData","useEffect","p","i","n","length","weibullDistribution","lg","ys","xs","xMean","yMean","Number","dividend","divisor","slope","intercept","result","y_to_yMean","y_linear_to_yMean","r","error","linearRegression","type","mode","text","hovertemplate","hoverinfo","marker","size","layout","showlegend","yaxis","tickmode","config","responsive","App","title","ReactDOM","render","document","getElementById"],"mappings":"8eAAA,IAAMA,EAASC,EAAf,KACAD,WAAgB,CAACC,EAAjBD,OCDO,IAAME,EAAa,SAACC,GAAD,OAASA,EAAA,QAAW,qBAAUC,EAAV,IAApB,IAEbC,EAAiB,SAACF,GAAD,OAASD,KAAkBC,EAA3B,QAkDjBG,EAAe,SAACC,GAG3B,MAAO,CAAEC,SAFGD,EAAA,KAAU,mBAAOE,SAASA,SAAS,GAAK,EAA9B,QAEEC,SADXH,EAAA,KAAU,uBAAUI,EAAV,S,0BChDnBC,EAAOC,IAAb,GAEaC,EAAU,SAAC,GAOlB,IANJC,EAMI,EANJA,KAMI,IALJC,YAKI,MALG,GAKH,MAJJT,aAII,MAJI,CAAC,KAAD,2CAIJ,EADDU,E,oIACC,MACJ,EAAgCC,mBAAS,CACvCC,GAAI,CAAEC,EAAF,GAASC,EAAT,GAAgBC,EAAG,MADlBC,EAAP,KAAiBC,EAAjB,KASA,OALAC,qBAAU,WACR,IAAMN,EDmByB,SAAChB,GAClC,GAAI,OAACA,QAAD,IAACA,MAAL,OACE,YAEFA,QAAS,qBAAWuB,OAAX,KACT,IAAMJ,EAAInB,EAAA,KAAQ,qBAAWwB,EAAD,IAAYxB,EAAtB,UAIlB,MAAO,CAAEiB,EAHCjB,EAAA,KAAQ,mBAAOM,SAAP,MAGHY,EAFLC,EAAA,KAAM,mBAAOb,SAASA,SAAS,GAAK,EAA9B,QAEKa,EAAd,EAAoBM,EAAGzB,EAAI0B,QC5BrBC,CAAX,GACMC,EDlBsB,SAACX,EAAGY,GAClC,IAAIC,EAAJ,EACA,IACEA,KACAD,WAAW,cACTC,OAAQN,EAARM,OAOJ,IAJA,IAAMC,EAAQ7B,EAAd,GACM8B,EAAQ9B,EAAe2B,EAAA,QAAU,mBAAQI,aAAR,OACnCC,EAAJ,EACIC,EAAJ,EACSX,EAAT,EAAgBA,EAAIM,EAApB,WACEI,IAAaJ,KAAD,IAAmBD,KAA/BK,GACAC,IAAYL,KAAD,IAAmBA,KAA9BK,GAEF,IAAMC,EAAQF,EAAd,EACMG,EAAYL,EAAQD,EAA1B,EACMO,EAAN,GACAR,WAAW,YACTQ,OAAY9B,IAAZ8B,MAEF,IAAMC,EAAaV,EAAA,KAAO,mBAAQrB,EAAD,IAAeA,EAAtB,MACpBgC,EAAoBF,EAAA,KAAW,mBAAQ9B,EAAD,IAAeA,EAAtB,MAC/BiC,EAAI1C,KAAgCA,EAA1C,GACM0B,EAAInB,SAASA,KAATA,GAAmB,EAAF,EAA3B,GACA,MAAO,CACL8B,MADK,EAELlB,EAFK,EAGLD,EAHK,EAILyB,MAJK,EAKLL,UALK,EAMLZ,EAAGA,GCdQkB,CAAiB3B,EAAD,EAAOA,EAAlC,GACAK,EAAY,CAAEL,GAAF,EAAUY,GAAIA,MACzB,CAJHN,IAME,qBACEV,KAAM,CAAC,EAAD,GAECQ,EAFD,IAGFwB,KAHE,UAIFC,KAJE,UAKFhC,KALE,EAMFiC,KAAM1B,EAAA,UAAkB,mBAAW,IAAD,WAAV,UACxB2B,cAAe,0BAPb,KAUC3B,EAVD,IAWF4B,UAXE,OAYFnC,KAZE,oBAaFoC,OAAQ,CACNC,KAAM,MAIZC,OAAM,GACJC,YADI,EAEJC,MAAO,EAAF,CACHC,SAAU,SACPnD,EAFA,KArBT,GA2BEoD,OAAQ,CACNC,YAAY,MC7CLC,G,OAJH,WACV,OAAO,kBAAC,EAAD,CAASC,MAAM,QAAQ9C,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,OCAnD+C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f0ede839.chunk.js","sourcesContent":["const Plotly = require('plotly.js/lib/core')\r\nPlotly.register([require('plotly.js/lib/scattergeo')])\r\n\r\nexport default Plotly\r\n","export const sumOfArray = (arr) => arr.reduce((c, n) => c + n, 0)\r\n\r\nexport const averageOfArray = (arr) => sumOfArray(arr) / arr.length\r\n\r\nexport const linearRegression = (x, ys) => {\r\n  let xs = x\r\n  if (!xs) {\r\n    xs = []\r\n    ys.forEach((e, i) => {\r\n      xs.push(i + 1)\r\n    })\r\n  }\r\n  const xMean = averageOfArray(xs)\r\n  const yMean = averageOfArray(ys.filter((e) => !Number.isNaN(e)))\r\n  let dividend = 0\r\n  let divisor = 0\r\n  for (let i = 0; i < xs.length; ++i) {\r\n    dividend += (xs[i] - xMean) * (ys[i] - yMean)\r\n    divisor += (xs[i] - xMean) * (xs[i] - xMean)\r\n  }\r\n  const slope = dividend / divisor\r\n  const intercept = yMean - xMean * slope\r\n  const result = []\r\n  xs.forEach((e) => {\r\n    result.push(e * slope + intercept)\r\n  })\r\n  const y_to_yMean = ys.map((e) => (e - yMean) * (e - yMean))\r\n  const y_linear_to_yMean = result.map((e) => (e - yMean) * (e - yMean))\r\n  const r = sumOfArray(y_linear_to_yMean) / sumOfArray(y_to_yMean)\r\n  const n = Math.pow(Math.E, (-1 * intercept) / slope)\r\n  return {\r\n    slope: slope,\r\n    y: result,\r\n    x: xs,\r\n    error: r,\r\n    intercept: intercept,\r\n    n: n\r\n  }\r\n}\r\n\r\nexport const weibullDistribution = (arr) => {\r\n  if (!arr?.length) {\r\n    return null\r\n  }\r\n  arr.sort((p, n) => (p > n ? 1 : -1))\r\n  const f = arr.map((e, i) => (i + 0.5) / arr.length)\r\n  const x = arr.map((e) => Math.log(e))\r\n  const y = f.map((e) => Math.log(Math.log(1 / (1 - e))))\r\n\r\n  return { x: x, y: y, f: f, n: arr.length }\r\n}\r\n\r\nexport const weibullScale = (scale) => {\r\n  const val = scale.map((e) => Math.log(Math.log(1 / (1 - e))))\r\n  const text = scale.map((e) => `${e * 100}%`)\r\n  return { tickvals: val, ticktext: text }\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport Plotly from './PlotlyPlot'\nimport createPlotlyComponent from 'react-plotly.js/factory'\n\nimport { weibullDistribution, weibullScale, linearRegression } from './utils'\n\nconst Plot = createPlotlyComponent(Plotly)\n\nexport const Weibull = ({\n  data,\n  name = '',\n  scale = [\n    0.0001, 0.005, 0.01, 0.05, 0.1, 0.2, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99\n  ],\n  ...rest\n}) => {\n  const [plotData, setPlotData] = useState({\n    wb: { x: [], y: [], f: [] }\n  })\n\n  useEffect(() => {\n    const wb = weibullDistribution(data)\n    const lg = linearRegression(wb.x, wb.y)\n    setPlotData({ wb: wb, lg: lg })\n  }, [data])\n  return (\n    <Plot\n      data={[\n        {\n          ...plotData.wb,\n          type: 'scatter',\n          mode: 'markers',\n          name: name,\n          text: plotData.wb.f.map((e) => `${(100 * e).toFixed(2)}%`),\n          hovertemplate: 'y: %{text}' + '<br>x: %{x}'\n        },\n        {\n          ...plotData.lg,\n          hoverinfo: 'none',\n          name: 'linear regression',\n          marker: {\n            size: 1\n          }\n        }\n      ]}\n      layout={{\n        showlegend: false,\n        yaxis: {\n          tickmode: 'array',\n          ...weibullScale(scale)\n        },\n        ...rest\n      }}\n      config={{\n        responsive: true\n      }}\n    />\n  )\n}\n","import React from 'react'\n\nimport { Weibull } from 'react-weibull'\nimport 'react-weibull/dist/index.css'\n\nconst App = () => {\n  return <Weibull title='Hello' data={[1, 2, 3, 4, 5]} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}